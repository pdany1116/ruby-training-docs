require "./lib/meme_generator_api"
require "rspec"

RSpec.describe MemeGeneratorAPI do
  include Rack::Test::Methods

  MEME_REQUEST = <<-JSON
    {
      "meme": {
        "uri": "https://s3.amazonaws.com/com.twilio.prod.twilio-docs/images/test.original.jpg",
        "text": "Hi mom!"
      }
    }
  JSON

  def app
    described_class
  end

  describe "post" do
    subject(:test_post) { post(route, request) }

    context "generate with empty request body" do
      let(:route) { "/generate" }
      let(:request) { "" }

      it "responds with bad request" do
        test_post

        expect(last_response.status).to eq 400
      end
    end

    context "generate with valid request body" do
      let(:route) { "/generate" }
      let(:request) { MEME_REQUEST }

      it "responds with temporary redirect" do
        test_post

        expect(last_response.status).to eq 307
      end
    end

    context "generate with empty invalid request body" do
      let(:route) { "/generate" }
      let(:request) { "{test : 123}" }

      it "responds with bad request" do
        test_post

        expect(last_response.status).to eq 400
      end
    end

    context "with invalid route" do
      let(:route) { "/invalid" }
      let(:request) { "{\"test\": 123}" }

      it "responds with not found" do
        test_post

        expect(last_response.status).to eq 404
      end
    end

    context "meme with valid source file generated by post request on /generate" do
      let(:route) { "/meme" }
      let(:request) { "" }

      before :each do
        post("/generate", MEME_REQUEST)
      end

      it "responds with ok" do
        test_post

        expect(last_response.status).to eq 200
      end
    end

    context "meme with invalid source file (no previous post request on /generate)" do
      let(:route) { "/meme" }
      let(:request) { "" }

      before :each do
        FileUtils.rm_rf("./tmp")
      end

      it "responds with not found" do
        test_post

        expect(last_response.status).to eq 404
      end
    end
  end
end
